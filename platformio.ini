[platformio]
;**************************************************************
; https://github.com/MCUdude/MiniCore/blob/master/PlatformIO.md
;1.  if you use USB ASP and need "WITH_BLACKJACK_AND_HOOKERS"

; - VSCode with configured pio (Platformio CLI) is required! 
; - If this is not possible
; you need an Arduino nano with MiniCore installed
; this can be done by following the instructions
; https://github.com/MCUdude/MiniCore#how-to-install
; in this case steps 1.1 and 1.2 must be skipped

;*********** step 1.1 ************
;default_envs = fuses_bootloader
    ;in terminal
    ;1.1.1  pio run -e fuses_bootloader -t fuses (enter)
    ;1.1.2  pio run -e fuses_bootloader -t bootloader (enter)
    ;1.1.3  next step

;*********** step 1.2 ************
; Connect the Arduino nano
; https://alexgyver.ru/wp-content/uploads/2021/07/usbasp10.jpg

;*********** step 1.3 ************
;copy and run in VSCode terminal
;pio run -e ISP -t upload
;*********** step 1.4 ************
;copy and run in VSCode terminal
;pio run -e EEP -t uploadeep


;**************************************************************
;2 if you don't need safety and WDT;) 
;connect USB to the Arduino nano and upload fimware 

;Run and enjoy)

;default_envs = nanoatmega328new
default_envs = ISP
;default_envs = EEP


[env]
platform = atmelavr
framework = arduino
board_build.f_cpu = 16000000L
; build_unflags = -flto
build_flags = 
monitor_port = ${env:UART.upload_port}
monitor_speed = 9600
lib_deps = gyverlibs/EncButton@^3.4
lib_ignore = Wire1

[env:nanoatmega328new]
upload_protocol = arduino
board = nanoatmega328new
upload_port = ${env:UART.upload_port}
upload_speed = 115200

[env:UART]
upload_protocol = arduino
board = ATmega328P
upload_port = /dev/tty.usbserial-141230
board_upload.speed = 57600
; board_upload.speed = ${env:fuses_bootloader.board_bootloader.speed}
; board_upload.speed = 115200

; pio run -e EEP -t upload
[env:EEP]
platform = atmelavr
board = ATmega328P
framework = arduino
upload_port = usb
upload_protocol = usbasp
upload_flags =
    -C${platformio.packages_dir}/tool-avrdude/avrdude.conf
    -p$BOARD_MCU
    -PUSB
    -cusbasp
upload_command = avrdude $UPLOAD_FLAGS -U flash:w:$SOURCE:i
board_upload.extra_flags = 

[env:EEParduinoISP]
; platform = atmelavr
board = ATmega328P
; upload_port = usb
upload_protocol = stk500v1
upload_flags =
  -C$PROJECT_PACKAGES_DIR/tool-avrdude/avrdude.conf
  -v 
  -V
  -patmega328p
  -stk500v1
  -P/dev/cu.usbserial-1430
  -b19200
upload_command = avrdude $UPLOAD_FLAGS -U eeprom:w:R:$SOURCE:i
board_upload.extra_flags = 

[env:ISP]
upload_protocol = custom
board = ATmega328P
upload_flags =
  -C$PROJECT_PACKAGES_DIR/tool-avrdude/avrdude.conf
  -p$BOARD_MCU
  -PUSB
  -cusbasp
upload_command = avrdude $UPLOAD_FLAGS -U flash:w:$SOURCE:i

[env:Upload_ISP_v2]
; Custom upload procedure
upload_protocol = stk500v1
board = ATmega328P
upload_flags =
  -C$PROJECT_PACKAGES_DIR/tool-avrdude/avrdude.conf
  -v 
  -V
  -patmega328p
  -cstk500v1
  -P/dev/cu.usbserial-1430
  -b19200
  -e
; Avrdude upload command
upload_command = avrdude $UPLOAD_FLAGS -Uflash:w:$SOURCE:i


[env:Upload_ISP]
board = ATmega328P
upload_protocol = custom              ; Custom upload procedure
upload_flags =                        ; Avrdude upload flags
  -C$PROJECT_PACKAGES_DIR/tool-avrdude/avrdude.conf
  -p$BOARD_MCU
  -PUSB
  -cusbasp
  -Uflash:w:$SOURCE:i
upload_command = avrdude $UPLOAD_FLAGS ; Avrdude upload command


; Run the following command to set fuses
; pio run -e fuses_bootloader -t fuses
; Run the following command to set fuses + burn bootloader
; pio run -e fuses_bootloader -t bootloader

[env:fuses_bootloader]
board = ATmega328P
board_hardware.oscillator = external ; Oscillator type
board_hardware.uart = uart0          ; Set UART to use for serial upload
board_bootloader.speed = 115200      ; Set bootloader baud rate
board_hardware.bod = 4.3v            ; Set brown-out detection 4.3v
board_hardware.eesave = yes          ; Preserve EEPROM when uploading using programmer
upload_protocol = usbasp             ; Use the USBasp as programmer   custom   usbasp
upload_flags =                       ; Select USB as upload port and divide the SPI clock by 8
  -PUSB
  -B8

[env:fuses_bootloader_ISP]
board = ATmega328P
board_hardware.oscillator = external ; Oscillator type
board_hardware.uart = uart0          ; Set UART to use for serial upload
board_bootloader.speed = 19200      ; Set bootloader baud rate
board_hardware.bod = 4.3v            ; Set brown-out detection 4.3v
board_hardware.eesave = yes          ; Preserve EEPROM when uploading using programmer
upload_protocol = stk500v1             ; Use the USBasp as programmer   custom   usbasp
upload_flags =                       ; Select USB as upload port and divide the SPI clock by 8
  -v 
  -P/dev/cu.usbserial-1430
  -b19200
  -e